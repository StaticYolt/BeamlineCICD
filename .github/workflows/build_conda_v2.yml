name: Build Conda Environment v2

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
      branches: [ "main" ]

jobs:
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        repos: [{org: "NSLS-II-CSX", repo: "profile_collection", branch: "master"}, {org: "NSLS-II-SRX", repo: "profile_collection", branch: "master"}]
        zenoto: [{env: "2023-3.3-py310-tiled", id: "10148425", checksum: "0a47934380db013b36f3e089afdff6aa"}]
    name: Run all repos
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Print out owner and repo
        run: |
          echo ${{matrix.repos.branch}}
          echo ${{matrix.repos.org}}
          echo ${{matrix.repos.repo}}
      - name: Cloning remote repos
        uses: GuillaumeFalourd/clone-github-repo-action@main
        with:
          branch: ${{matrix.repos.branch}}
          owner: ${{matrix.repos.org}}
          repository: ${{matrix.repos.repo}}
      - name: Access cloned repository content
        run: |
          echo "ROOT"
          ls -la
          ls
          echo "CLONED REPO"
          cd ${{matrix.repos.repo}}
          ls -la
          ls
      
#      - name: Build Conda Env
#        env:
#          CONDA_PREFIX: "home/runner/miniconda"
#          CONDA_ENV_NAME: "2023-3.3-py310-tiled"
#        run: |
#          echo "Installing conda"
#          wget --progress=dot:giga https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
#          bash ./miniconda.sh -b -p $CONDA_PREFIX
#          source "${CONDA_PREFIX}/etc/profile.d/conda.sh"
#
#          echo "Downloading conda env..." &&
#          wget --progress=dot:giga  "https://zenodo.org/record/${{matrix.zenoto.id}}/files/${CONDA_ENV_NAME}.tar.gz?download=1" -O "${CONDA_ENV_NAME}.tar.gz"
#
#          echo "Extracting conda env..."
#          mkdir -v -p "${CONDA_PREFIX}/envs/${CONDA_ENV_NAME}"
#          tar -xvf "${CONDA_ENV_NAME}.tar.gz" -C "${CONDA_PREFIX}/envs/${CONDA_ENV_NAME}"
#          set +u
#          conda activate "${CONDA_PREFIX}/envs/${CONDA_ENV_NAME}"
#          conda unpack && echo "Unpacked successfully!"
#          set -u
      - name: Installing Redis
        run: |
          echo "SUDO: Installing redis"
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install -y redis
          
          if ! systemctl is-active --quiet redis-server.service; then
            echo "SUDO: Starting redis server"
            sudo systemctl start redis-server.service
          fi
          systemctl status redis-server.service --lines 0 --no-pager
          
          echo "DONE WITH REDIS"
#      - name: Installing Mongo
#        run: |
#          sudo apt-get install gnupg curl
#          curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | \
#             sudo gpg -o /usr/share/keyrings/mongodb-server-4.4.gpg \
#             --dearmor
#          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-4.4.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
#          sudo apt-get update
#          sudo apt-get install -y mongodb-org
#
#          if ! systemctl is-active --quiet mongod; then
#            echo "SUDO: Starting mongo daemon"
#            sudo systemctl start mongod
#          fi
#          systemctl status mongod.service --lines 0 --no-pager
#          echo "DONE WITH MONGO"

#          sudo apt-get update
#          sudo apt-get install -y lsb-release
#          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
#          echo "deb [ arch=$(dpkg --print-architecture) ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
#          sudo apt-get install -y mongodb-org
#          echo "Completed mongo download"